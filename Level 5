#!/usr/bin/python
import thread
import threading
from threading import Lock
import time

cv = Lock()
wheels = [True,True,True,True,True,True]
count = 0 
blocked = False
freeweeling = False
sinking = False
obstacle = False


f = open( "file.txt", "r" )
g = open( "file2.txt", "r" )
h = open( "file3.txt", "r" )

# Iterates through the array
def count_problems(threadName, delay):
    global count
    global blocked
    global freeweeling
    global sinking
    
    while 1:
     
     while blocked == True or freeweeling == True or sinking == True:
        cv.acquire()      
        count = count + 1   
        print (threadName,"Number of problems",count) 
        time.sleep(delay)
        blocked = False
        freeweeling = False
        sinking = False   
        time.sleep(delay)
        cv.release()  
        break


def wheelss(threadName, delay):
    global blocked
    global freeweeling
    global sinking
    global wheels
    global x,y,z
    
    wheels = ["True","True","True","True","True","True"]     
    
    while 1:
    
      while blocked == True or freeweeling == True or sinking == True:
       cv.acquire()   
       y = input ("How many wheels are with problems. Between 1-6: \n") 
       while y <= 0 or y>=7:
        print ("Error, wheels should be between 1 and 6")
        y = input ("How many wheels are with problems:")
       for y in range(y):    
         x = input ("Enter the wheels with problem 0-5: \n")
         while (x < 0) or (x >=6):
          print ("Error, the Roves has just 6 wheels 0-5")
          x = input ("Enter the wheels with problem: \n")    
         wheels[x] = "False"        
       for i in range(6):        
         print (threadName, wheels[i]) 
       time.sleep(delay)    
       cv.release()    
       wheels = ["True","True","True","True","True","True"]   
       break 

def solve(threadName, delay):
    global count
    global blocked
    global freeweeling
    global sinking
    global cv
    global obstacle
    
    while 1:
    
      while blocked != True or freeweeling != True or sinking != True or obstacle != True:                              
        while 1:        
           
            print(threadName, "Working")
            time.sleep(delay)
            
                     
            if blocked == True:
              cv.acquire()
              time.sleep(delay)
              z = input ("The robot can't solve the problem, please press 0 to send instrutions: \n")
              while z != 0:
               z = input ("The robot can't solve the problem, please press 0 to send instrutions: \n")
              s = f.read()
              print s
              time.sleep(delay)
              print (threadName, "Problem solved")
              time.sleep(delay)
              blocked = False
              cv.release()
              break         
                
            if freeweeling == True:
              cv.acquire()
              time.sleep(delay) 
              z = input ("The robot can't solve the problem, please 0 enter to send instrutions: \n")
              while z != 0:
               z = input ("The robot can't solve the problem, please press 0 to send instrutions: \n")
              s = g.read()
              print s   
              time.sleep(delay)         
              print (threadName, "Problem solved")       
              time.sleep(delay)
              freeweeling = False
              cv.release()
              break
                
            if sinking == True:
              cv.acquire()
              time.sleep(delay)
              z = input ("The robot can't solve the problem, please press 0 to send instrutions: \n")
              while z != 0:
               z = input ("The robot can't solve the problem, please press 0 to send instrutions: \n")
              s = h.read()
              print s 
              time.sleep(delay)
              print (threadName, "Problem solved")
              time.sleep(delay)
              sinking = False
              cv.release()
              break
              
            if obstacle == True:
              cv.acquire()
              time.sleep(delay)
              command = raw_input("Press r to avoid the obstacle right or press l to avoid the obstacle left:\n")
              
              if command == "r":
                time.sleep(delay)
                print ("You avoid the obstacle right \n")
                
              if command == "l":               
                time.sleep(delay)
                print ("You avoid the obstacle left \n")                
                                                  
              time.sleep(delay)
              print (threadName, "Problem solved")
              time.sleep(delay)
              obstacle = False
              cv.release()
              break
             


def problems(threadName,delay):
    global count
    global blocked
    global freeweeling
    global sinking
    global obstacle
    
    while 1:

      cv.acquire()
      time.sleep(delay)
      command = raw_input("Enter the problem: b-blocked, f-freewheeling, s-sinking, o-obstacles:\n")
      time.sleep(delay)
      cv.release()
       
      if command == "b": 
          cv.acquire()
          blocked = True   
          print("Wheel Blocked \n")
          time.sleep(delay)
          print (threadName, "Waiting to solve the problem")
          cv.release()
          time.sleep(delay)
                
      if command == "f":
          freeweeling = True
          print("Wheel was freewheeling \n")
          time.sleep(delay)
          print (threadName, "Waiting to solve the problem")
          time.sleep(delay)
          
      if command == "s":
          sinking = True
          print("wheel was sinking\n")
          time.sleep(delay)
          print (threadName, "Waiting to solve the problem")
          time.sleep(delay)
          
      if command == "o":
          obstacle = True
          print("There is an obstacle \n")
          time.sleep(delay)
          print (threadName, "Waiting to solve the problem")        
          time.sleep(delay)
      
wheels = [True,True,True,True,True,True]
    

# Create three threads
try:
   t1 = thread.start_new_thread( problems, ("Thread-2",2 ) )
   t2 = thread.start_new_thread( solve, ("Thread-1", 2 ) )
   t3 = thread.start_new_thread( count_problems, ("Thread-3", 2 ) )
   t4 = thread.start_new_thread( wheelss, ("Thread-4", 2 ) )
   
   
except:
   print "Error: unable to start thread"

while 1:
   pass
